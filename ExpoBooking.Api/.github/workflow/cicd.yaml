name: Simple CI/CD Pipeline with Email Notifications and Linting

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: copro-web-app-zffw1v3o
  DOTNET_VERSION: '8.0.x'
  AZURE_RESOURCE_GROUP: expo-resource-group

jobs:
  linting:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install .NET Code Analysis tools
      run: |
        dotnet tool install -g dotnet-format
        dotnet tool install -g SecurityCodeScan.VS2019
        dotnet add package StyleCop.Analyzers --version 1.1.118

    - name: Run .NET Code Linting
      run: |
        echo "Running .NET code analysis..."
        
        # Find all C# projects
        $projects = Get-ChildItem -Recurse -Filter *.csproj
        foreach ($project in $projects) {
          echo "Analyzing project: $($project.Name)"
          
          # Run code formatting check
          dotnet format $project.FullName --verify-no-changes --verbosity detailed
          
          # Run security analysis
          dotnet build $project.FullName /p:SecurityCodeScan=true
        }
        
        # Run additional static analysis
        dotnet list package --vulnerable
        dotnet outdated

    - name: Install AJAX/JavaScript linting tools
      run: |
        npm install -g eslint
        npm install -g jshint
        npm install -g ajax-linter

    - name: Run AJAX/JavaScript Linting
      run: |
        echo "Running AJAX/JavaScript linting..."
        
        # Check if frontend directory exists
        if (Test-Path -Path "front") {
          Set-Location front
          
          # Initialize package.json if missing
          if (!(Test-Path -Path "package.json")) {
            npm init -y
          }
          
          # Install linting dependencies
          npm install --save-dev eslint jshint @typescript/eslint-parser
          
          # Run ESLint
          npx eslint . --ext .js,.jsx,.ts,.tsx --format table || echo "ESLint completed with findings"
          
          # Run JSHint
          npx jshint . || echo "JSHint completed with findings"
          
          # Check for common AJAX security issues
          echo "Checking for AJAX security patterns..."
          grep -r "\.ajax(" . --include="*.js" --include="*.ts" || echo "No AJAX calls found"
          grep -r "fetch(" . --include="*.js" --include="*.ts" || echo "No fetch calls found"
        else
          echo "Frontend directory not found, skipping AJAX linting"
        fi

    - name: Run XML/Config Linting
      run: |
        echo "Checking configuration files..."
        
        # Check web.config for security settings
        if (Test-Path -Path "web.config") {
          echo "Checking web.config..."
          # Validate XML structure
          powershell -Command "[xml](Get-Content web.config)" | Out-Null
          echo "web.config XML is valid"
        }
        
        # Check appsettings.json
        if (Test-Path -Path "appsettings.json") {
          echo "Checking appsettings.json..."
          # Validate JSON structure
          Get-Content appsettings.json | ConvertFrom-Json | Out-Null
          echo "appsettings.json JSON is valid"
        }

  build-and-test:
    runs-on: windows-latest
    needs: linting
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Find project file
      id: find-project
      run: |
        $projectFile = Get-ChildItem -Path "ExpoBooking.Api" -Recurse -Filter *.csproj | Select-Object -First 1
        if ($projectFile) {
          echo "PROJECT_PATH=$($projectFile.FullName)" >> $env:GITHUB_ENV
          echo "Found project file: $($projectFile.FullName)"
        } else {
          echo "No .csproj file found in ExpoBooking.Api directory!"
          Get-ChildItem -Path "ExpoBooking.Api" -Recurse
          exit 1
        }

    - name: Run Code Quality Analysis
      run: |
        echo "Running additional code quality checks..."
        
        # Install and run SonarScanner for .NET
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"ExpoBooking.Api" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=${{ secrets.SONAR_TOKEN }}
        dotnet build ${{ env.PROJECT_PATH }}
        dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build with dotnet
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Run Security Scan
      run: |
        # Security vulnerability scan
        dotnet list package --vulnerable
        dotnet retire --path ${{ env.PROJECT_PATH }}

    - name: Test with dotnet
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=testresults.trx"

    - name: Publish test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: **/*.trx

    - name: Publish with dotnet
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish

    - name: Process frontend files
      run: |
        if (Test-Path -Path "front") {
          Get-ChildItem -Path "front" -Filter *.txt | ForEach-Object {
            $newName = $_.Name -replace '\.txt$', ''
            Move-Item -Path $_.FullName -Destination (Join-Path $_.Directory $newName) -Force
          }
          echo "Frontend files processed"
        } else {
          echo "Frontend directory not found"
        }

    - name: Copy frontend to publish directory
      run: |
        if (Test-Path -Path "front") {
          if (!(Test-Path -Path "publish/wwwroot")) {
            New-Item -ItemType Directory -Path "publish/wwwroot" -Force
          }
          Copy-Item -Path "front/*" -Destination "publish/wwwroot/" -Recurse -Force
          echo "Frontend files copied to publish directory"
        } else {
          echo "No frontend files to copy"
        }

    - name: Run Final Security Check
      run: |
        echo "Running final security checks..."
        # Check for sensitive data in published files
        grep -r "password\|secret\|key" ./publish --include="*.json" --include="*.config" || echo "No obvious secrets found"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-app
        path: publish/

  deploy:
    runs-on: windows-latest
    needs: build-and-test
    environment: production
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: dotnet-app

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate Azure Resources
      run: |
        az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        az appservice plan list --query "[?name=='${{ env.AZURE_WEBAPP_NAME }}']"

    - name: Deploy to production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: .
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}

    - name: Health Check after deployment
      run: |
        echo "Waiting for application to start..."
        Start-Sleep -Seconds 30
        $healthUrl = "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        try {
          $response = Invoke-WebRequest -Uri $healthUrl -TimeoutSec 30
          echo "Health check: ✅ Application is responding"
        } catch {
          echo "Health check: ⚠️ Application might be starting up slowly"
        }

  notify-email:
    runs-on: ubuntu-latest
    needs: [linting, build-and-test, deploy]
    if: always()
    steps:
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Deployment Status: ${{ job.status }} - Linting & Security Results'
        body: |
          CI/CD Pipeline completed with status: ${{ job.status }}
          
          Pipeline Details:
          - Application: ${{ env.AZURE_WEBAPP_NAME }}
          - Triggered by: ${{ github.actor }}
          - Commit: ${{ github.sha }}
          - Linting Status: ${{ needs.linting.result }}
          - Build Status: ${{ needs.build-and-test.result }}
          - Deploy Status: ${{ needs.deploy.result }}
          - Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Code Quality Summary:
          - .NET Code Analysis: Completed
          - AJAX/JavaScript Linting: Completed  
          - Security Scanning: Completed
          - Dependency Vulnerability Check: Completed
          
          Next Steps:
          - Review linting results in workflow logs
          - Check test coverage reports
          - Verify deployment health status
        to: mramzan.workmail@gmail.com
        from: GitHub Actions