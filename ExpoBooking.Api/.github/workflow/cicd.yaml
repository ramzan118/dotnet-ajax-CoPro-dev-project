name: CI/CD Pipeline with Snyk Security & Email Notifications

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: copro-web-app-zffw1v3o
  DOTNET_VERSION: '8.0.x'
  AZURE_RESOURCE_GROUP: expo-resource-group

jobs:
  linting:
    name: "üîç Code Linting"
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run .NET format check
      run: |
        echo "Running code formatting check..."
        # Add your linting commands here
        dotnet format --verify-no-changes --verbosity detailed || echo "Linting issues found"

    - name: Run code analysis
      run: |
        echo "Running code analysis..."
        # Add additional linting/analysis commands

  snyk-security:
    name: "üîí Snyk Security Scan"
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --fail-on=upgradable

    - name: Snyk monitor
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --severity-threshold=high

  build-and-test:
    name: "üèóÔ∏è Build & Test"
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Find project file
      id: find-project
      run: |
        $projectFile = Get-ChildItem -Path "ExpoBooking.Api" -Recurse -Filter *.csproj | Select-Object -First 1
        if ($projectFile) {
          echo "PROJECT_PATH=$($projectFile.FullName)" >> $env:GITHUB_ENV
          echo "Found project file: $($projectFile.FullName)"
        } else {
          echo "No .csproj file found in ExpoBooking.Api directory!"
          Get-ChildItem -Path "ExpoBooking.Api" -Recurse
          exit 1
        }

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build with dotnet
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Test with dotnet
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal

    - name: Publish with dotnet
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish

    - name: Process frontend files
      run: |
        if (Test-Path -Path "front") {
          Get-ChildItem -Path "front" -Filter *.txt | ForEach-Object {
            $newName = $_.Name -replace '\.txt$', ''
            Move-Item -Path $_.FullName -Destination (Join-Path $_.Directory $newName) -Force
          }
          echo "Frontend files processed"
        } else {
          echo "No frontend directory found, skipping frontend processing"
        }

    - name: Copy frontend to publish directory
      run: |
        if (Test-Path -Path "front") {
          if (!(Test-Path -Path "publish/wwwroot")) {
            New-Item -ItemType Directory -Path "publish/wwwroot" -Force
          }
          Copy-Item -Path "front/*" -Destination "publish/wwwroot/" -Recurse -Force
          echo "Frontend files copied to publish directory"
        } else {
          echo "No frontend directory found, skipping frontend copy"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-app
        path: publish/

  deploy:
    name: "üöÄ Deploy to Azure"
    runs-on: windows-latest
    needs: [linting, snyk-security, build-and-test]
    environment: production
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: dotnet-app

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: .
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}

  notify-email:
    name: "üìß Email Notification"
    runs-on: ubuntu-latest
    needs: [linting, snyk-security, build-and-test, deploy]
    if: always()
    steps:
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'CI/CD Status: ${{ needs.deploy.result }} - ${{ github.workflow }}'
        body: |
          <!DOCTYPE html>
          <html>
          <head>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .container { max-width: 600px; margin: 0 auto; }
              .header { background: #f4f4f4; padding: 20px; border-radius: 5px; }
              .status-pass { color: #2d8c2d; font-weight: bold; }
              .status-fail { color: #d63638; font-weight: bold; }
              .status-skipped { color: #8a8a8a; font-weight: bold; }
              .test-result { margin: 10px 0; padding: 10px; border-left: 4px solid; }
              .passed { border-color: #2d8c2d; background: #f0f9f0; }
              .failed { border-color: #d63638; background: #fdf0f0; }
              .skipped { border-color: #8a8a8a; background: #f8f8f8; }
              .summary { background: #e8f4fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üöÄ CI/CD Pipeline Status</h1>
                <h2>Workflow: ${{ github.workflow }}</h2>
                <p><strong>Overall Status:</strong> <span class="${{ needs.deploy.result == 'success' && 'status-pass' || 'status-fail' }}">${{ needs.deploy.result }}</span></p>
              </div>

              <div class="summary">
                <h3>üìä Quick Summary</h3>
                <p><strong>Application:</strong> ${{ env.AZURE_WEBAPP_NAME }}</p>
                <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
                <p><strong>Branch:</strong> ${{ github.ref }}</p>
                <p><strong>Commit:</strong> ${{ github.sha }}</p>
                <p><strong>Timestamp:</strong> ${{ fromJSON('{}').now }}</p>
              </div>

              <h3>üîç Detailed Test Results</h3>

              <div class="test-result ${{ needs.linting.result == 'success' && 'passed' || needs.linting.result == 'failure' && 'failed' || 'skipped' }}">
                <h4>üîç Code Linting & Quality</h4>
                <p><strong>Status:</strong> <span class="${{ needs.linting.result == 'success' && 'status-pass' || needs.linting.result == 'failure' && 'status-fail' || 'status-skipped' }}">
                  ${{ needs.linting.result == 'success' && '‚úÖ PASSED' || needs.linting.result == 'failure' && '‚ùå FAILED' || '‚ö™ SKIPPED' }}
                </span></p>
                <p>Code formatting, style checks, and quality analysis</p>
              </div>

              <div class="test-result ${{ needs.snyk-security.result == 'success' && 'passed' || needs.snyk-security.result == 'failure' && 'failed' || 'skipped' }}">
                <h4>üîí Snyk Security Scan</h4>
                <p><strong>Status:</strong> <span class="${{ needs.snyk-security.result == 'success' && 'status-pass' || needs.snyk-security.result == 'failure' && 'status-fail' || 'status-skipped' }}">
                  ${{ needs.snyk-security.result == 'success' && '‚úÖ PASSED' || needs.snyk-security.result == 'failure' && '‚ùå FAILED' || '‚ö™ SKIPPED' }}
                </span></p>
                <p>Vulnerability assessment and dependency scanning</p>
                ${{ needs.snyk-security.result == 'success' && '<p>‚úÖ No high severity vulnerabilities detected</p>' || '' }}
                ${{ needs.snyk-security.result == 'failure' && '<p>‚ùå Security vulnerabilities found - immediate review required</p>' || '' }}
              </div>

              <div class="test-result ${{ needs.build-and-test.result == 'success' && 'passed' || needs.build-and-test.result == 'failure' && 'failed' || 'skipped' }}">
                <h4>üèóÔ∏è Build & Unit Tests</h4>
                <p><strong>Status:</strong> <span class="${{ needs.build-and-test.result == 'success' && 'status-pass' || needs.build-and-test.result == 'failure' && 'status-fail' || 'status-skipped' }}">
                  ${{ needs.build-and-test.result == 'success' && '‚úÖ PASSED' || needs.build-and-test.result == 'failure' && '‚ùå FAILED' || '‚ö™ SKIPPED' }}
                </span></p>
                <p>Compilation, testing, and artifact preparation</p>
              </div>

              <div class="test-result ${{ needs.deploy.result == 'success' && 'passed' || needs.deploy.result == 'failure' && 'failed' || 'skipped' }}">
                <h4>üöÄ Azure Deployment</h4>
                <p><strong>Status:</strong> <span class="${{ needs.deploy.result == 'success' && 'status-pass' || needs.deploy.result == 'failure' && 'status-fail' || 'status-skipped' }}">
                  ${{ needs.deploy.result == 'success' && '‚úÖ PASSED' || needs.deploy.result == 'failure' && '‚ùå FAILED' || '‚ö™ SKIPPED' }}
                </span></p>
                <p>Deployment to Azure App Service production environment</p>
                ${{ needs.deploy.result == 'success' && '<p>‚úÖ Application successfully deployed to production</p>' || '' }}
                ${{ needs.deploy.result == 'failure' && '<p>‚ùå Deployment failed - check Azure logs</p>' || '' }}
              </div>

              <div class="summary">
                <h3>üéØ Final Result</h3>
                ${{ needs.linting.result == 'success' && needs.snyk-security.result == 'success' && needs.build-and-test.result == 'success' && needs.deploy.result == 'success' }}
                <p style="color: #2d8c2d; font-size: 18px; font-weight: bold;">‚úÖ ALL CHECKS PASSED - Deployment Successful!</p>
                ${{ else }}
                <p style="color: #d63638; font-size: 18px; font-weight: bold;">‚ùå SOME CHECKS FAILED - Review Required!</p>
                ${{ endif }}
                
                <p><strong>Failed Jobs:</strong> 
                ${{ needs.linting.result == 'failure' && 'üîç Linting, ' || '' }}
                ${{ needs.snyk-security.result == 'failure' && 'üîí Snyk Security, ' || '' }}
                ${{ needs.build-and-test.result == 'failure' && 'üèóÔ∏è Build & Test, ' || '' }}
                ${{ needs.deploy.result == 'failure' && 'üöÄ Deployment' || '' }}
                ${{ needs.linting.result != 'failure' && needs.snyk-security.result != 'failure' && needs.build-and-test.result != 'failure' && needs.deploy.result != 'failure' && 'None' || '' }}
                </p>
              </div>

              <hr>
              <p><strong>üîó Quick Links:</strong></p>
              <ul>
                <li><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Detailed Logs</a></li>
                <li><a href="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net">Visit Application</a></li>
                <li><a href="https://github.com/${{ github.repository }}">Repository</a></li>
              </ul>

              <p><em>This is an automated message from GitHub Actions CI/CD Pipeline</em></p>
            </div>
          </body>
          </html>
        to: mramzan.workmail@gmail.com
        from: GitHub Actions
        content_type: text/html