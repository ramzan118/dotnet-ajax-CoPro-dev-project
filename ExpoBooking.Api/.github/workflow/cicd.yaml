name: CI/CD Pipeline with PR Linting

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: copro-web-app-zffw1v3o
  DOTNET_VERSION: '8.0.x'
  AZURE_RESOURCE_GROUP: expo-resource-group

jobs:
  linting:
    name: Code Quality Check
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run .NET Code Analysis
      id: dotnet-lint
      run: |
        echo "Running .NET code analysis..."
        
        # Install analysis tools
        dotnet tool install -g dotnet-format
        dotnet add package StyleCop.Analyzers --version 1.1.118
        
        # Find and analyze all C# projects
        $projects = Get-ChildItem -Recurse -Filter *.csproj
        $lintResults = @()
        
        foreach ($project in $projects) {
          echo "Analyzing project: $($project.Name)"
          
          # Run code formatting check
          dotnet format $project.FullName --verify-no-changes --verbosity normal
          if ($LASTEXITCODE -eq 0) {
            $lintResults += "‚úÖ $($project.Name): Formatting OK"
          } else {
            $lintResults += "‚ùå $($project.Name): Formatting issues found"
          }
          
          # Build with analyzers
          dotnet build $project.FullName --verbosity minimal
          if ($LASTEXITCODE -eq 0) {
            $lintResults += "‚úÖ $($project.Name): Build with analyzers OK"
          } else {
            $lintResults += "‚ùå $($project.Name): Build analysis failed"
          }
        }
        
        # Output results for PR comment
        echo "LINT_RESULTS<<EOF" >> $env:GITHUB_OUTPUT
        echo "$($lintResults -join "`n")" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHPUT_OUTPUT

    - name: Run JavaScript/AJAX Linting
      id: js-lint
      run: |
        echo "Running JavaScript/AJAX linting..."
        
        $lintResults = @()
        
        if (Test-Path -Path "front") {
          Set-Location front
          
          # Check for package.json
          if (Test-Path -Path "package.json") {
            npm install
          } else {
            npm init -y
            npm install --save-dev eslint
          }
          
          # Create basic ESLint config if missing
          if (!(Test-Path -Path ".eslintrc.js")) {
            @"
module.exports = {
  env: {
    browser: true,
    es2021: true
  },
  extends: ['eslint:recommended'],
  parserOptions: {
    ecmaVersion: 12,
    sourceType: 'module'
  },
  rules: {
    'no-unused-vars': 'warn',
    'no-console': 'warn'
  }
};
"@ | Out-File -FilePath ".eslintrc.js" -Encoding UTF8
          }
          
          # Run ESLint
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json | Out-File -FilePath "eslint-report.json" -Encoding UTF8
          
          if ($LASTEXITCODE -eq 0) {
            $lintResults += "‚úÖ JavaScript/AJAX: No linting errors"
          } else {
            $errors = Get-Content "eslint-report.json" | ConvertFrom-Json
            $errorCount = ($errors | ForEach-Object { $_.errorCount }) | Measure-Object -Sum | Select-Object -ExpandProperty Sum
            $lintResults += "‚ö†Ô∏è JavaScript/AJAX: $errorCount linting issues found"
          }
        } else {
          $lintResults += "‚ÑπÔ∏è No frontend directory found for JavaScript linting"
        }
        
        echo "JS_LINT_RESULTS<<EOF" >> $env:GITHUB_OUTPUT
        echo "$($lintResults -join "`n")" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT

    - name: Upload Lint Results
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: |
          **/eslint-report.json
          **/bin/
          **/obj/

  code-analysis:
    name: Static Analysis
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run Security Scan
      run: |
        # Install and run security scanner
        dotnet tool install --global security-scan
        dotnet list package --vulnerable --format json | Out-File -FilePath "vulnerability-report.json"
        
        # Check for critical vulnerabilities
        $vulnReport = Get-Content "vulnerability-report.json" | ConvertFrom-Json
        if ($vulnReport.vulnerabilities.Count -gt 0) {
          echo "‚ùå Vulnerabilities found in dependencies"
          exit 1
        } else {
          echo "‚úÖ No vulnerabilities found"
        }

    - name: Publish Code Analysis Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: vulnerability-report.json

  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    needs: [linting, code-analysis]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && needs.linting.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Find project file
      id: find-project
      run: |
        $projectFile = Get-ChildItem -Path "ExpoBooking.Api" -Recurse -Filter *.csproj | Select-Object -First 1
        if ($projectFile) {
          echo "PROJECT_PATH=$($projectFile.FullName)" >> $env:GITHUB_ENV
          echo "Found project file: $($projectFile.FullName)"
        } else {
          echo "No .csproj file found in ExpoBooking.Api directory!"
          exit 1
        }

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build with dotnet
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Test with dotnet
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=testresults.trx"

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: **/*.trx

    - name: Publish with dotnet
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish

  pr-lint-comment:
    name: Add PR Lint Results Comment
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    needs: [linting, code-analysis]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create PR Comment with Lint Results
      uses: actions/github-script@v6
      with:
        script: |
          const { linting, codeAnalysis } = context.job.needs;
          
          let commentBody = `## üîç Code Quality Report for PR #${{ github.event.number }}

          **Linting Status:** ${linting.result === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          **Security Scan:** ${codeAnalysis.result === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}

          ### üìä Summary
          | Check | Status | Details |
          |-------|--------|---------|
          | .NET Code Analysis | ${linting.result === 'success' ? '‚úÖ Passed' : '‚ùå Issues found'} | [View logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
          | JavaScript/AJAX Linting | ${linting.result === 'success' ? '‚úÖ Passed' : '‚ö†Ô∏è Review needed'} | [View logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
          | Security Scan | ${codeAnalysis.result === 'success' ? '‚úÖ Clean' : '‚ùå Vulnerabilities'} | [View report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

          ### üìù Next Steps
          ${linting.result === 'success' && codeAnalysis.result === 'success' 
            ? '‚úÖ All checks passed! Ready for review and merge.' 
            : '‚ö†Ô∏è Some checks failed. Please review the findings before merging.'}

          ---
          *Generated by GitHub Actions*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

  deploy:
    name: Deploy to Production
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: production
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: dotnet-app

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: .
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}

  notify-email:
    name: Email Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always() && (github.event_name == 'push')
    
    steps:
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Deployment Status: ${{ job.status }} - PR Checks Included'
        body: |
          CI/CD Pipeline completed with status: ${{ job.status }}
          
          Pipeline Details:
          - Application: ${{ env.AZURE_WEBAPP_NAME }}
          - Triggered by: ${{ github.actor }}
          - Commit: ${{ github.sha }}
          - PR Linting Status: ${{ needs.linting.result }}
          - Build Status: ${{ needs.build-and-test.result }}
          - Deploy Status: ${{ needs.deploy.result }}
          
          Code Quality Summary:
          - .NET Code Analysis: ${{ needs.linting.result }}
          - JavaScript/AJAX Linting: ${{ needs.linting.result }}
          - Security Scanning: ${{ needs.code-analysis.result }}
          
          View detailed results: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: mramzan.workmail@gmail.com
        from: GitHub Actions