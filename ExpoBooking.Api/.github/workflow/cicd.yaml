name: CI/CD Pipeline with Snyk Security & Email Notifications

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: copro-web-app-zffw1v3o
  DOTNET_VERSION: '8.0.x'
  AZURE_RESOURCE_GROUP: expo-resource-group

jobs:
  snyk-security:
    name: "üîí Snyk Security Scan"
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --fail-on=upgradable

    - name: Snyk monitor (track in Snyk dashboard)
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --severity-threshold=high

  build-and-test:
    name: "üèóÔ∏è Build & Test"
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Find project file
      id: find-project
      run: |
        $projectFile = Get-ChildItem -Path "ExpoBooking.Api" -Recurse -Filter *.csproj | Select-Object -First 1
        if ($projectFile) {
          echo "PROJECT_PATH=$($projectFile.FullName)" >> $env:GITHUB_ENV
          echo "Found project file: $($projectFile.FullName)"
        } else {
          echo "No .csproj file found in ExpoBooking.Api directory!"
          Get-ChildItem -Path "ExpoBooking.Api" -Recurse
          exit 1
        }

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build with dotnet
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Test with dotnet
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal

    - name: Publish with dotnet
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish

    - name: Process frontend files
      run: |
        if (Test-Path -Path "front") {
          Get-ChildItem -Path "front" -Filter *.txt | ForEach-Object {
            $newName = $_.Name -replace '\.txt$', ''
            Move-Item -Path $_.FullName -Destination (Join-Path $_.Directory $newName) -Force
          }
          echo "Frontend files processed"
        } else {
          echo "No frontend directory found, skipping frontend processing"
        }

    - name: Copy frontend to publish directory
      run: |
        if (Test-Path -Path "front") {
          if (!(Test-Path -Path "publish/wwwroot")) {
            New-Item -ItemType Directory -Path "publish/wwwroot" -Force
          }
          Copy-Item -Path "front/*" -Destination "publish/wwwroot/" -Recurse -Force
          echo "Frontend files copied to publish directory"
        } else {
          echo "No frontend directory found, skipping frontend copy"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-app
        path: publish/

  deploy:
    name: "üöÄ Deploy to Azure"
    runs-on: windows-latest
    needs: [snyk-security, build-and-test]
    environment: production
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: dotnet-app

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: .
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}

    - name: Health check after deployment
      run: |
        echo "Running health check on deployed application..."
        # Add your application health check URL here
        # Invoke-RestMethod -Uri "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health" -Method Get

  notify-email:
    name: "üìß Email Notification"
    runs-on: ubuntu-latest
    needs: [snyk-security, build-and-test, deploy]
    if: always()
    steps:
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Deployment Status: ${{ needs.deploy.result }} - ${{ github.workflow }}'
        body: |
          # CI/CD Pipeline Status - ${{ github.workflow }}
          
          ## Summary:
          - **Overall Status**: ${{ needs.deploy.result }}
          - **Application**: ${{ env.AZURE_WEBAPP_NAME }}
          - **Triggered by**: ${{ github.actor }}
          - **Branch**: ${{ github.ref }}
          - **Commit**: ${{ github.sha }}
          
          ## Detailed Results:
          - üîí **Snyk Security Scan**: ${{ needs.snyk-security.result }}
          - üèóÔ∏è **Build & Test**: ${{ needs.build-and-test.result }}
          - üöÄ **Deployment**: ${{ needs.deploy.result }}
          
          ## Security Findings:
          ${{ needs.snyk-security.result == 'success' && '‚úÖ No high severity vulnerabilities detected' || '‚ö†Ô∏è Security issues found - review required' }}
          
          ## Next Steps:
          ${{ needs.deploy.result == 'success' && '‚úÖ Deployment completed successfully' || '‚ùå Deployment failed - check logs for details' }}
          
          ---
          **Run Details:** 
          - Repository: ${{ github.repository }}
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}
          - View Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          *This is an automated message from GitHub Actions*
        to: mramzan.workmail@gmail.com
        from: GitHub Actions
        content_type: text/html