name: CI/CD with Required PR Linting

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
    types: [opened, synchronize, reopened]

env:
  AZURE_WEBAPP_NAME: copro-web-app-zffw3v3o
  DOTNET_VERSION: '8.0.x'
  AZURE_RESOURCE_GROUP: expo-resource-group

jobs:
  linting:
    name: "🔍 Linting & Code Quality"
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    outputs:
      result: ${{ steps.final-status.outputs.result }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: .NET Code Formatting Check
      id: dotnet-format
      continue-on-error: true
      run: |
        # Your existing formatting code...
        # But ensure it sets proper exit codes
        if ($formatIssues) {
          exit 1
        }

    - name: .NET Build with Analyzers
      id: dotnet-build
      run: |
        # Your existing build code...

    - name: JavaScript/TypeScript Linting
      id: js-lint
      continue-on-error: true
      run: |
        # Your existing JS linting code...

    - name: Set final linting status
      id: final-status
      run: |
        # Determine overall status based on previous steps
        if ("${{ steps.dotnet-format.outcome }}" == "failure" || "${{ steps.dotnet-build.outcome }}" == "failure") {
          echo "result=failure" >> $env:GITHUB_OUTPUT
          echo "::error::Linting failed"
          exit 1
        } else {
          echo "result=success" >> $env:GITHUB_OUTPUT
        }

  security-scan:
    name: "🔒 Security Scan"
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Vulnerability Check
      run: |
        # Your existing security code...

    - name: Always succeed security scan (for demo)
      run: echo "Security scan completed"

  build-and-test:
    name: "🏗️ Build & Test"
    runs-on: windows-latest
    needs: [linting, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build and test
      run: |
        # Your existing build/test code...

# Add this new job to create required status checks
  required-checks:
    name: "✅ Required Checks"
    runs-on: windows-latest
    needs: [linting, security-scan, build-and-test]
    if: always()
    
    steps:
    - name: Aggregate check results
      id: checks
      run: |
        $allSuccess = ${{ needs.linting.result == 'success' && needs.build-and-test.result == 'success' }}
        if ($allSuccess) {
          echo "result=success" >> $env:GITHUB_OUTPUT
          echo "All required checks passed!"
        } else {
          echo "result=failure" >> $env:GITHUB_OUTPUT
          echo "Some checks failed"
          exit 1
        }