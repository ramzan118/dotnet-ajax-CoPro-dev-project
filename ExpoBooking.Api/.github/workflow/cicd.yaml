name: CI/CD with Required PR Linting

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
    types: [opened, synchronize, reopened]

env:
  AZURE_WEBAPP_NAME: copro-web-app-zffw1v3o
  DOTNET_VERSION: '8.0.x'
  AZURE_RESOURCE_GROUP: expo-resource-group

jobs:
  linting:
    name: "🔍 Linting & Code Quality"
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    outputs:
      dotnet-result: ${{ steps.dotnet-lint.outputs.result }}
      js-result: ${{ steps.js-lint.outputs.result }}
      overall-result: ${{ steps.final-check.outputs.result }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: .NET Code Formatting Check
      id: dotnet-format
      run: |
        echo "Running .NET code formatting check..."
        dotnet tool install -g dotnet-format
        
        # Check formatting without making changes
        $projects = Get-ChildItem -Recurse -Filter *.csproj
        $formatIssues = $false
        
        foreach ($project in $projects) {
          echo "Checking formatting for: $($project.Name)"
          dotnet format $project.FullName --verify-no-changes --verbosity detailed
          if ($LASTEXITCODE -ne 0) {
            $formatIssues = $true
            echo "::warning file=$($project.Name),title=Formatting Issues::Code formatting issues found in $($project.Name)"
          }
        }
        
        if ($formatIssues) {
          echo "result=failure" >> $env:GITHUB_OUTPUT
          echo "::error::.NET code formatting check failed"
          # Don't fail the job yet - let it continue for other checks
        } else {
          echo "result=success" >> $env:GITHUB_OUTPUT
        }

    - name: .NET Build with Analyzers
      id: dotnet-build
      run: |
        echo "Building with .NET analyzers..."
        $projects = Get-ChildItem -Recurse -Filter *.csproj
        $buildSuccess = $true
        
        foreach ($project in $projects) {
          echo "Building: $($project.Name)"
          dotnet build $project.FullName --verbosity minimal --no-restore
          if ($LASTEXITCODE -ne 0) {
            $buildSuccess = $false
            echo "::error::Build failed for $($project.Name)"
            exit 1
          }
        }
        
        if ($buildSuccess) {
          echo "result=success" >> $env:GITHUB_OUTPUT
        }

    - name: JavaScript/TypeScript Linting
      id: js-lint
      run: |
        echo "Running JavaScript/TypeScript linting..."
        
        if (Test-Path -Path "front") {
          Set-Location front
          
          # Create basic ESLint config if missing
          if (!(Test-Path -Path ".eslintrc.js")) {
            @"
module.exports = {
  env: { browser: true, es2021: true },
  extends: ['eslint:recommended'],
  parserOptions: { ecmaVersion: 12, sourceType: 'module' },
  rules: { 
    'no-unused-vars': 'warn', 
    'no-console': 'warn',
    'no-alert': 'error'
  }
};
"@ | Out-File -FilePath ".eslintrc.js" -Encoding UTF8
          }
          
          # Run ESLint
          npx eslint . --ext .js,.jsx,.ts,.tsx --format stylish || true
          
          # Check for AJAX patterns
          echo "Checking for AJAX patterns..."
          $ajaxFiles = Get-ChildItem -Recurse -Include *.js,*.ts,*.jsx,*.tsx | Select-String -Pattern "\.ajax\(|fetch\(|XMLHttpRequest" -List | Select-Object -ExpandProperty Path
          if ($ajaxFiles) {
            echo "Found AJAX calls in:"
            $ajaxFiles | ForEach-Object { echo "  - $_" }
          }
          
          echo "result=success" >> $env:GITHUB_OUTPUT
        } else {
          echo "No frontend directory found"
          echo "result=skipped" >> $env:GITHUB_OUTPUT
        }

    - name: Final Lint Status
      id: final-check
      run: |
        # Determine overall status
        if ("${{ steps.dotnet-format.outputs.result }}" == "failure") {
          echo "result=failure" >> $env:GITHUB_OUTPUT
          echo "::error::Linting failed due to formatting issues"
        } else {
          echo "result=success" >> $env:GITHUB_OUTPUT
        }

  security-scan:
    name: "🔒 Security Scan"
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Vulnerability Check
      run: |
        echo "Checking for vulnerable dependencies..."
        dotnet list package --vulnerable
        
        # Check for hardcoded secrets
        echo "Checking for potential secrets..."
        $secrets = Get-ChildItem -Recurse -Include *.cs,*.json,*.config | Select-String -Pattern "password|secret|key|token" -CaseSensitive
        if ($secrets) {
          echo "::warning::Potential secrets found in code. Please review."
          $secrets | ForEach-Object { 
            echo "File: $($_.FileName), Line: $($_.LineNumber)"
          }
        }

  build-and-test:
    name: "🏗️ Build & Test"
    runs-on: windows-latest
    needs: [linting, security-scan]
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'push')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Find project file
      id: find-project
      run: |
        $projectFile = Get-ChildItem -Path "ExpoBooking.Api" -Recurse -Filter *.csproj | Select-Object -First 1
        if ($projectFile) {
          echo "PROJECT_PATH=$($projectFile.FullName)" >> $env:GITHUB_ENV
        } else {
          echo "::error::No .csproj file found!"
          exit 1
        }

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --logger "trx;LogFileName=testresults.trx"

  pr-status:
    name: "📊 PR Status Report"
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    needs: [linting, security-scan, build-and-test]
    
    steps:
    - name: PR Status Summary
      run: |
        echo "## PR Quality Checks Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 .NET Linting | ${{ needs.linting.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code quality analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Review' }} | Vulnerability check |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build & Tests | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} | Compilation and tests |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ needs.linting.result == 'success' && needs.build-and-test.result == 'success' && '✅ Ready for merge' || '❌ Needs attention' }}" >> $GITHUB_STEP_SUMMARY

    - name: Update PR Description
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { linting, securityScan, buildAndTest } = context.job.needs;
          
          const allPassed = linting.result === 'success' && buildAndTest.result === 'success';
          const statusIcon = allPassed ? '✅' : '❌';
          const statusText = allPassed ? 'All checks passed' : 'Some checks failed';
          
          const commentBody = `
          ## ${statusIcon} PR Quality Gate - ${statusText}
          
          ### Check Results:
          - **🔍 Linting**: ${linting.result === 'success' ? '✅ Passed' : '❌ Failed'}
          - **🔒 Security**: ${securityScan.result === 'success' ? '✅ Passed' : '⚠️ Needs review'} 
          - **🏗️ Build & Tests**: ${buildAndTest.result === 'success' ? '✅ Passed' : '❌ Failed'}
          
          **Merge Status**: ${allPassed ? '✅ **READY TO MERGE**' : '❌ **CANNOT MERGE** - Fix issues first'}
          
          ---
          *Last updated: ${new Date().toISOString()}*
          `;
          
          // Find existing bot comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('PR Quality Gate')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  deploy:
    name: "🚀 Deploy to Production"
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.build-and-test.result == 'success'
    environment: production
    
    steps:
    - name: Deploy to Azure
      run: echo "Deployment would happen here"